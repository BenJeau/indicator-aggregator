use async_trait::async_trait;
use tracing::instrument;

use crate::{
    sources::{handle_response, FetchState, Indicator, Source},
    Error, Result,
};

pub struct MalwareBazaar;

#[async_trait]
impl Source for MalwareBazaar {
    fn source_name(&self) -> &'static str {
        "MalwareBazaar"
    }

    #[instrument(skip_all, err)]
    async fn fetch_data(
        &self,
        indicator: &Indicator,
        _state: &FetchState,
    ) -> Result<serde_json::Value> {
        let response = reqwest::Client::new()
            .post("https://mb-api.abuse.ch/api/v1/")
            .form(&[("query", "get_info"), ("hash", &indicator.data)])
            .send()
            .await?;

        let data: serde_json::Value = handle_response(response).await?;

        if let Some(serde_json::Value::String(query_status)) = data.get("query_status") {
            if query_status == "hash_not_found" {
                return Err(Error::NotFound);
            }

            if query_status != "ok" {
                return Err(Error::ResponseError);
            }
        }

        Ok(data)
    }
}
